apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "awx.fullname" . }}-configs
  labels:
    {{- include "awx.labels" . | nindent 4 }}
data:
  SECRET_KEY: {{ randAlphaNum 50 | b64enc | quote }}
  settings.py: |
    # AWX settings file
    import os
    import socket
    def get_secret():
        if os.path.exists("/etc/tower/SECRET_KEY"):
            return open('/etc/tower/SECRET_KEY', 'rb').read().strip()
    ADMINS = ()
    # Automatically deprovision pods that go offline
    AWX_AUTO_DEPROVISION_INSTANCES = True
    STATIC_ROOT = '/var/lib/awx/public/static'
    PROJECTS_ROOT = '/var/lib/awx/projects'
    JOBOUTPUT_ROOT = '/var/lib/awx/job_status'
    SECRET_KEY = get_secret()
    ALLOWED_HOSTS = ['*']
    INTERNAL_API_URL = 'http://127.0.0.1:80'
    # Container environments don't like chroots
    AWX_PROOT_ENABLED = False
    CLUSTER_HOST_ID = socket.gethostname()
    SYSTEM_UUID = '00000000-0000-0000-0000-000000000000'
{{- if .Values.ingress.tls }}
    # SECURITY STUFF
    CSRF_COOKIE_SECURE = True
    # DO NOT SET THIS AS IT BREAKS LOGIN
    # CSRF_COOKIE_HTTPONLY = True
    SESSION_COOKIE_SECURE = True
    SESSION_COOKIE_HTTPONLY = True
{{- else }}
    # SECURITY STUFF
    CSRF_COOKIE_SECURE = False
    # DO NOT SET THIS AS IT BREAKS LOGIN
    # CSRF_COOKIE_HTTPONLY = True
    SESSION_COOKIE_SECURE = False
    SESSION_COOKIE_HTTPONLY = True
{{- end }}
    ###############################################################################
    # EMAIL SETTINGS
    ###############################################################################
    SERVER_EMAIL = 'root@localhost'
    DEFAULT_FROM_EMAIL = 'webmaster@localhost'
    EMAIL_SUBJECT_PREFIX = '[AWX] '
    EMAIL_HOST = 'localhost'
    EMAIL_PORT = 25
    EMAIL_HOST_USER = ''
    EMAIL_HOST_PASSWORD = ''
    EMAIL_USE_TLS = False
    LOGGING['handlers']['console'] = {
        '()': 'logging.StreamHandler',
        'level': 'DEBUG',
        'formatter': 'simple',
    }
    LOGGING['loggers']['django.request']['handlers'] = ['console']
    LOGGING['loggers']['rest_framework.request']['handlers'] = ['console']
    LOGGING['loggers']['awx']['handlers'] = ['console', 'external_logger']
    LOGGING['loggers']['awx.main.commands.run_callback_receiver']['handlers'] = ['console']
    LOGGING['loggers']['awx.main.tasks']['handlers'] = ['console', 'external_logger']
    LOGGING['loggers']['awx.main.scheduler']['handlers'] = ['console', 'external_logger']
    LOGGING['loggers']['django_auth_ldap']['handlers'] = ['console']
    LOGGING['loggers']['social']['handlers'] = ['console']
    LOGGING['loggers']['system_tracking_migrations']['handlers'] = ['console']
    LOGGING['loggers']['rbac_migrations']['handlers'] = ['console']
    LOGGING['loggers']['awx.isolated.manager.playbooks']['handlers'] = ['console']
    LOGGING['handlers']['callback_receiver'] = {'class': 'logging.NullHandler'}
    LOGGING['handlers']['task_system'] = {'class': 'logging.NullHandler'}
    LOGGING['handlers']['tower_warnings'] = {'class': 'logging.NullHandler'}
    LOGGING['handlers']['rbac_migrations'] = {'class': 'logging.NullHandler'}
    LOGGING['handlers']['system_tracking_migrations'] = {'class': 'logging.NullHandler'}
    LOGGING['handlers']['management_playbooks'] = {'class': 'logging.NullHandler'}
    DATABASES = {
        'default': {
            'ATOMIC_REQUESTS': True,
            'ENGINE': 'awx.main.db.profiled_pg',
            'NAME': os.getenv("DATABASE_NAME", None),
            'USER': os.getenv("DATABASE_USER", None),
            'PASSWORD': os.getenv("DATABASE_PASSWORD", None),
            'HOST': os.getenv("DATABASE_HOST", None),
            'PORT': os.getenv("DATABASE_PORT", None),
        }
    }
    if os.getenv("DATABASE_SSLMODE", False):
        DATABASES['default']['OPTIONS'] = {'sslmode': os.getenv("DATABASE_SSLMODE")}
    BROKER_URL = 'amqp://{}:{}@{}:{}/{}'.format(
        os.getenv("RABBITMQ_USER", None),
        os.getenv("RABBITMQ_PASSWORD", None),
        os.getenv("RABBITMQ_HOST", None),
        os.getenv("RABBITMQ_PORT", "5672"),
        os.getenv("RABBITMQ_VHOST", "tower"))
    CHANNEL_LAYERS = {
        'default': {'BACKEND': 'asgi_amqp.AMQPChannelLayer',
                    'ROUTING': 'awx.main.routing.channel_routing',
                    'CONFIG': {'url': BROKER_URL}}
    }
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
            'LOCATION': '{}:{}'.format(os.getenv("MEMCACHED_HOST", None), os.getenv("MEMCACHED_PORT", "11211"))
        }
    }
    USE_X_FORWARDED_PORT = True
    REMOTE_HOST_HEADERS = ['HTTP_X_FORWARDED_FOR']
  nginx.conf: |
    #user awx;
    worker_processes  1;
    pid /tmp/nginx.pid;
    events {
        worker_connections  1024;
    }
    http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;
        server_tokens off;
        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';
        access_log /dev/stdout main;
        map $http_upgrade $connection_upgrade {
            default upgrade;
            ''      close;
        }
        sendfile        on;
        #tcp_nopush     on;
        #gzip  on;
        upstream uwsgi {
            server 127.0.0.1:8050;
            }
        upstream daphne {
            server 127.0.0.1:8051;
        }
        
        server {
                    listen 8052 default_server;
            
            # If you have a domain name, this is where to add it
            server_name _;
            keepalive_timeout 65;
            # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
            add_header Strict-Transport-Security max-age=15768000;
            add_header Content-Security-Policy "default-src 'self'; connect-src 'self' ws: wss:; style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline' *.pendo.io; img-src 'self' *.pendo.io data:; report-uri /csp-violation/";
            add_header X-Content-Security-Policy "default-src 'self'; connect-src 'self' ws: wss:; style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline' *.pendo.io; img-src 'self' *.pendo.io data:; report-uri /csp-violation/";
            # Protect against click-jacking https://www.owasp.org/index.php/Testing_for_Clickjacking_(OTG-CLIENT-009)
            add_header X-Frame-Options "DENY";
            location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            deny all;
            }
            location /static/ {
                alias /var/lib/awx/public/static/;
            }
            location /favicon.ico { alias /var/lib/awx/public/static/favicon.ico; }
            location /websocket {
                # Pass request to the upstream alias
                proxy_pass http://daphne;
                # Require http version 1.1 to allow for upgrade requests
                proxy_http_version 1.1;
                # We want proxy_buffering off for proxying to websockets.
                proxy_buffering off;
                # http://en.wikipedia.org/wiki/X-Forwarded-For
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                # enable this if you use HTTPS:
                proxy_set_header X-Forwarded-Proto https;
                # pass the Host: header from the client for the sake of redirects
                proxy_set_header Host $http_host;
                # We've set the Host header, so we don't need Nginx to muddle
                # about with redirects
                proxy_redirect off;
                # Depending on the request value, set the Upgrade and
                # connection headers
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection $connection_upgrade;
            }
            location / {
                # Add trailing / if missing
                rewrite ^(.*)$http_host(.*[^/])$ $1$http_host$2/ permanent;
                uwsgi_read_timeout 120s;
                uwsgi_pass uwsgi;
                include /etc/nginx/uwsgi_params;            proxy_set_header X-Forwarded-Port 443;
            }
        }
    }
  krb5.conf: |
    # DEFAULT FAKE DOMAIN AS ANSIBLE REQUIRED AT LEAST 1 DEFAULT DOMAIN TO BE CONFIGURED
    # To opt out of the system crypto-policies configuration of krb5, remove the
    # symlink at /etc/krb5.conf.d/crypto-policies which will not be recreated.
    includedir /etc/krb5.conf.d/
    [logging]
        default = FILE:/var/log/krb5libs.log
        kdc = FILE:/var/log/krb5kdc.log
        admin_server = FILE:/var/log/kadmind.log
    [libdefaults]
        dns_lookup_realm = true
        dns_lookup_kdc = true
        ticket_lifetime = 24h
        renew_lifetime = 7d
        forwardable = true
        rdns = false
        ignore_acceptor_hostname = true
        pkinit_anchors = FILE:/etc/pki/tls/certs/ca-bundle.crt
        spake_preauth_groups = edwards25519
        default_realm = FAKE.MYDOMAIN.COM
        default_ccache_name = KEYRING:persistent:%{uid}
    [realms]
    FAKE.MYDOMAIN.COM = {
        auth_to_local = RULE:[1:$0\$1](^FAKE\.MYDOMAIN\.COM\.*)s/^FAKE\.MYDOMAIN\.COM/USERS/
        auth_to_local = default
    }
    [domain_realm]
    .fake.mydomain.com = FAKE.MYDOMAIN.COM
    fake.mydomain.com = FAKE.MYDOMAIN.COM
